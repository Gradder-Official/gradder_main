# This is a CI workflow, which checks if everything is set up for automatic deployment to Google Cloud
# Steps: Set up Python, install dependencies, format with Black, lint with flake8, run the tests

name: CI/pre-deploy workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out the working directory
      uses: actions/checkout@v2
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
    - name: Format code with Black
      uses: lgeiger/black-action@v1.0.1
      
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Firestore credentials set-up
      shell: bash
      env: 
        GOOGLE_APPLICATION_CREDENTIALS: key.json
      run: |
        echo -n '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}' > key.json
        
    - name: Test with pytest
      shell: bash
      env:
        MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
        MONGO_CONNECTION_STRING: ${{ secrets.MONGO_CONNECTION_STRING }}
        GOOGLE_APPLICATION_CREDENTIALS: key.json
      run: |
        pytest
    
    # Checks with codecov and uploads the codecov report
    - name: Checkout the code in main for CodeCov
      uses: actions/checkout@main
      
    - name: Generate and send the codecov report
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Delete the key # Couldn't do it before because the GAPP env wouldn't set up properly
      shell: bash
      run: |
        rm -f key.json
